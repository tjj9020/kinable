name: Integration Tests

on:
  workflow_dispatch: # Allows manual triggering from the GitHub UI

permissions:
  id-token: write # Required for OIDC
  contents: read  # Required for checkout

jobs:
  update-and-prepare-env: # Renamed Job 1
    runs-on: ubuntu-latest
    outputs: # Define job outputs (NO test user creds here anymore)
      api_endpoint: ${{ steps.stack-outputs.outputs.api_endpoint }}
      cognito_pool_id: ${{ steps.stack-outputs.outputs.cognito_pool_id }}
      cognito_client_id: ${{ steps.stack-outputs.outputs.cognito_client_id }}
      families_table: ${{ steps.stack-outputs.outputs.families_table }}
      profiles_table: ${{ steps.stack-outputs.outputs.profiles_table }}
      aws_region: ${{ steps.stack-outputs.outputs.aws_region }}
    env:
      AWS_REGION: us-east-2 # Or use a secret if preferred
      STACK_NAME: kinable-ci-dev-stack # PERSISTENT STACK NAME
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_ARN }}
      # CI_USER_PASSWORD: "YourCiPassword1!" # Moved to test job

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup PNPM
        uses: pnpm/action-setup@v4

      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build # Build TS code

      - name: Build SAM Application
        working-directory: apps/chat-api-service
        run: sam build -t sam.yaml

      - name: Deploy/Update Persistent Stack
        working-directory: apps/chat-api-service
        run: |
          echo "Deploying/Updating stack: ${{ env.STACK_NAME }}"
          sam deploy \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --resolve-s3 \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --no-confirm-changeset \
            --template-file .aws-sam/build/template.yaml
          echo "Stack deployment/update attempt finished."

      - name: Get Stack Outputs & Set Job Outputs
        id: stack-outputs
        run: |
          echo "Fetching outputs for stack: ${{ env.STACK_NAME }}"
          outputs=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --region ${{ env.AWS_REGION }} --query "Stacks[0].Outputs" --output json)
          echo "Stack outputs JSON: $outputs"
          if [ -z "$outputs" ] || [ "$outputs" == "null" ]; then outputs="{}"; fi

          echo "api_endpoint=$(echo "$outputs" | jq -r '.[] | select(.OutputKey=="ChatRouterApi") | .OutputValue // ""')" >> $GITHUB_OUTPUT
          echo "cognito_pool_id=$(echo "$outputs" | jq -r '.[] | select(.OutputKey=="CognitoUserPoolId") | .OutputValue // ""')" >> $GITHUB_OUTPUT
          echo "cognito_client_id=$(echo "$outputs" | jq -r '.[] | select(.OutputKey=="CognitoUserPoolClientId") | .OutputValue // ""')" >> $GITHUB_OUTPUT
          echo "families_table=$(echo "$outputs" | jq -r '.[] | select(.OutputKey=="FamiliesTableName") | .OutputValue // ""')" >> $GITHUB_OUTPUT
          echo "profiles_table=$(echo "$outputs" | jq -r '.[] | select(.OutputKey=="ProfilesTableName") | .OutputValue // ""')" >> $GITHUB_OUTPUT
          echo "aws_region=${{ env.AWS_REGION }}" >> $GITHUB_OUTPUT

  run-tests: # Renamed Job 2
    runs-on: ubuntu-latest
    needs: update-and-prepare-env # Dependency
    env:
      # Access outputs from the previous job
      TEST_API_ENDPOINT: ${{ needs.update-and-prepare-env.outputs.api_endpoint }}
      TEST_COGNITO_USER_POOL_ID: ${{ needs.update-and-prepare-env.outputs.cognito_pool_id }}
      TEST_COGNITO_CLIENT_ID: ${{ needs.update-and-prepare-env.outputs.cognito_client_id }}
      TEST_DYNAMODB_TABLE_FAMILIES: ${{ needs.update-and-prepare-env.outputs.families_table }}
      TEST_DYNAMODB_TABLE_PROFILES: ${{ needs.update-and-prepare-env.outputs.profiles_table }}
      TEST_AWS_REGION: ${{ needs.update-and-prepare-env.outputs.aws_region }}
      # Role needed for AWS calls
      AWS_REGION: ${{ needs.update-and-prepare-env.outputs.aws_region }}
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_ARN }}
      # Define password here
      CI_USER_PASSWORD: "YourCiPassword1!"
      # TEST_USER_USERNAME/PASSWORD will be set via $GITHUB_ENV in the Create User step

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup PNPM
        uses: pnpm/action-setup@v4

      - name: Setup AWS Credentials for Test/User Management
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Optional: Re-build if tests need latest artifacts not reflected in 'update' job's build
      # - name: Build packages
      #   run: pnpm build

      # Create Test User step MOVED here
      - name: Create Test User
        id: create-test-user # ID still useful for referencing username in delete step
        run: |
          if [ -z "${{ env.TEST_COGNITO_USER_POOL_ID }}" ]; then
            echo "Error: Cognito Pool ID is empty. Cannot create test user."
            exit 1
          fi
          _TEST_USER_USERNAME="ci-test-user-${{ github.run_id }}@example.com"
          _TEST_USER_PASSWORD="${{ env.CI_USER_PASSWORD }}"
          FAMILY_ID="ci-family-${{ github.run_id }}"
          PROFILE_ID="ci-profile-${{ github.run_id }}"
          ROLE="child" # Assuming schema attribute name is 'role'

          echo "Creating user $_TEST_USER_USERNAME in pool ${{ env.TEST_COGNITO_USER_POOL_ID }}..."
          aws cognito-idp admin-create-user \
            --user-pool-id "${{ env.TEST_COGNITO_USER_POOL_ID }}" \
            --username "$_TEST_USER_USERNAME" \
            --message-action SUPPRESS \
            --temporary-password "$_TEST_USER_PASSWORD" \
            --user-attributes Name=email,Value="$_TEST_USER_USERNAME" Name=email_verified,Value=true \
            --region ${{ env.AWS_REGION }} || echo "User might already exist..."

          echo "Setting permanent password for $_TEST_USER_USERNAME..."
          aws cognito-idp admin-set-user-password \
            --user-pool-id "${{ env.TEST_COGNITO_USER_POOL_ID }}" \
            --username "$_TEST_USER_USERNAME" \
            --password "$_TEST_USER_PASSWORD" \
            --permanent \
            --region ${{ env.AWS_REGION }}

          echo "Updating attributes for $_TEST_USER_USERNAME..."
          # Ensure Cognito Pool Schema has custom:familyId, custom:profileId, custom:role (all strings, mutable)
          aws cognito-idp admin-update-user-attributes \
            --user-pool-id "${{ env.TEST_COGNITO_USER_POOL_ID }}" \
            --username "$_TEST_USER_USERNAME" \
            --user-attributes \
              Name="custom:custom:familyId",Value="$FAMILY_ID" \
              Name="custom:custom:profileId",Value="$PROFILE_ID" \
              Name="custom:custom:role",Value="$ROLE" \
            --region ${{ env.AWS_REGION }}

          echo "Test user setup complete."
          # Set environment variables for the next step (Run Integration Tests)
          echo "TEST_USER_USERNAME=$_TEST_USER_USERNAME" >> $GITHUB_ENV
          echo "TEST_USER_PASSWORD=$_TEST_USER_PASSWORD" >> $GITHUB_ENV


      - name: Run Integration Tests
        # TEST_USER_USERNAME and TEST_USER_PASSWORD are set in GITHUB_ENV by previous step
        run: pnpm --filter @kinable/chat-api-service test:integration

      - name: Delete Test User # Cleanup step uses TEST_USER_USERNAME from GITHUB_ENV
        if: always()
        run: |
          if [ -z "${{ env.TEST_USER_USERNAME }}" ]; then # Check GITHUB_ENV variable
            echo "Test username not found in env, skipping deletion."
            exit 0
          fi
          if [ -z "${{ env.TEST_COGNITO_USER_POOL_ID }}" ]; then
             echo "Cognito Pool ID not found in env, skipping deletion."
             exit 0
          fi

          echo "Deleting test user: ${{ env.TEST_USER_USERNAME }} from pool ${{ env.TEST_COGNITO_USER_POOL_ID }}..."
          aws cognito-idp admin-delete-user \
            --user-pool-id "${{ env.TEST_COGNITO_USER_POOL_ID }}" \
            --username "${{ env.TEST_USER_USERNAME }}" \
            --region ${{ env.AWS_REGION }} || echo "Failed to delete user ${{ env.TEST_USER_USERNAME }}" 