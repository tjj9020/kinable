AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  chat-api-service

  Sample SAM Template for chat-api-service

Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Runtime: nodejs18.x
    Architectures:
      - x86_64

Resources:
  # Define the HTTP API with authorizer configuration
  KinableHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins:
          - 'http://localhost:8080'
          - 'http://localhost:8000'
        AllowHeaders:
          - Authorization
          - Content-Type
        AllowMethods:
          - GET
          - POST
          - OPTIONS
        MaxAge: 600
      # Define auth configurations
      Auth:
        Authorizers:
          JwtAuthorizer:
            FunctionArn: !GetAtt LambdaAuthorizerFunction.Arn
            FunctionInvokeRole: !GetAtt LambdaAuthorizerInvokeRole.Arn
            Identity:
              Headers:
                - Authorization
            AuthorizerPayloadFormatVersion: 2.0
            EnableSimpleResponses: false # We're returning IAM policies, not simple bool

  # IAM role for API Gateway to invoke the Lambda authorizer
  LambdaAuthorizerInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole

  HelloWorldFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: . 
      Handler: dist/handlers/hello.handler
      Role: !GetAtt HelloWorldFunctionRole.Arn
      Events:
        HelloWorldEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref KinableHttpApi
            Path: /hello
            Method: get
            Auth:
              Authorizer: JwtAuthorizer

  KinableUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: KinableUserPool-dev
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: custom:familyId
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: custom:profileId
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: custom:role
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: custom:region
          AttributeDataType: String
          Mutable: true
          Required: false
      AutoVerifiedAttributes: [email]
      UsernameAttributes: [email]

  KinableUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref KinableUserPool
      ClientName: WebAppClient-dev
      GenerateSecret: false
      SupportedIdentityProviders: [COGNITO]
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows: [code, implicit]
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - http://localhost:3000/callback
      LogoutURLs:
        - http://localhost:3000/logout
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      ReadAttributes:
        - email
        - email_verified
        - name
        - preferred_username
        - custom:custom:familyId
        - custom:custom:profileId
        - custom:custom:role
        - custom:custom:region
      # WriteAttributes: []

  LambdaAuthorizerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies: # Add inline policies for specific DynamoDB access
        - PolicyName: LambdaAuthorizerDynamoDBReadPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt FamiliesTable.Arn
                  - !GetAtt ProfilesTable.Arn

  LambdaAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: dist/authorizers/jwtAuthorizer.handler
      Runtime: nodejs18.x
      Timeout: 5
      Role: !GetAtt LambdaAuthorizerFunctionRole.Arn
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref KinableUserPool
          COGNITO_CLIENT_ID: !Ref KinableUserPoolClient
          FAMILIES_TABLE_NAME: !Ref FamiliesTable
          PROFILES_TABLE_NAME: !Ref ProfilesTable

  FamiliesTable:
    Type: AWS::DynamoDB::GlobalTable
    Properties:
      TableName: !Sub "KinableFamilies-${AWS::StackName}"
      AttributeDefinitions:
        - AttributeName: familyId
          AttributeType: S
      KeySchema:
        - AttributeName: familyId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Replicas:
        - Region: us-east-2
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true
        - Region: us-west-2
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true

  ProfilesTable:
    Type: AWS::DynamoDB::GlobalTable
    Properties:
      TableName: !Sub "KinableProfiles-${AWS::StackName}"
      AttributeDefinitions:
        - AttributeName: profileId
          AttributeType: S
        - AttributeName: familyId
          AttributeType: S
      KeySchema:
        - AttributeName: profileId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: FamilyIdIndex
          KeySchema:
            - AttributeName: familyId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Replicas:
        - Region: us-east-2
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true
        - Region: us-west-2
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true

Outputs:
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${KinableHttpApi}.execute-api.${AWS::Region}.amazonaws.com/hello"
  HelloWorldFunctionArn:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  CognitoUserPoolId:
    Description: "ID of the Kinable Cognito User Pool"
    Value: !Ref KinableUserPool
  CognitoUserPoolClientId:
    Description: "ID of the Kinable Cognito User Pool Client"
    Value: !Ref KinableUserPoolClient
  LambdaAuthorizerFunctionArn:
    Description: "ARN for the Lambda Authorizer Function"
    Value: !GetAtt LambdaAuthorizerFunction.Arn
  FamiliesTableName:
    Description: "Name of the Families DynamoDB table"
    Value: !Ref FamiliesTable
  ProfilesTableName:
    Description: "Name of the Profiles DynamoDB table"
    Value: !Ref ProfilesTable 