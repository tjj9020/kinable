AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  chat-api-service

  Sample SAM Template for chat-api-service

Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Runtime: nodejs20.x
    Architectures:
      - arm64

Resources:
  # Define the HTTP API with authorizer configuration
  KinableHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins:
          - 'http://localhost:8080'
          - 'http://localhost:8000'
        AllowHeaders:
          - Authorization
          - Content-Type
        AllowMethods:
          - GET
          - POST
          - OPTIONS
        MaxAge: 600
      # Define auth configurations
      Auth:
        Authorizers:
          JwtAuthorizer:
            FunctionArn: !GetAtt LambdaAuthorizerFunction.Arn
            FunctionInvokeRole: !GetAtt LambdaAuthorizerInvokeRole.Arn
            Identity:
              Headers:
                - Authorization
            AuthorizerPayloadFormatVersion: 2.0
            EnableSimpleResponses: false # We're returning IAM policies, not simple bool
            AuthorizerResultTtlInSeconds: 0 # Disable caching for tests

  # IAM role for API Gateway to invoke the Lambda authorizer
  LambdaAuthorizerInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole

  HelloWorldFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Adding a description to test CFN update behavior. # Test nudge
      CodeUri: . 
      Handler: dist/src/handlers/hello.handler
      Role: !GetAtt HelloWorldFunctionRole.Arn
      Events:
        HelloWorldEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref KinableHttpApi
            Path: /hello
            Method: get
            Auth:
              Authorizer: JwtAuthorizer
    Metadata:
      BuildMethod: makefile

  KinableUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: KinableUserPool-dev
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: familyId
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: profileId
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: role
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: region
          AttributeDataType: String
          Mutable: true
          Required: false
      AutoVerifiedAttributes: [email]
      UsernameAttributes: [email]

  KinableUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref KinableUserPool
      ClientName: WebAppClient-dev
      GenerateSecret: false
      SupportedIdentityProviders: [COGNITO]
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows: [code, implicit]
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - http://localhost:3000/callback
      LogoutURLs:
        - http://localhost:3000/logout
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
      PreventUserExistenceErrors: ENABLED
      ReadAttributes:
        - email
        - email_verified
        - name
        - preferred_username
        - custom:familyId
        - custom:profileId
        - custom:role
        - custom:region
      # WriteAttributes: []

  LambdaAuthorizerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies: # Add inline policies for specific DynamoDB access
        - PolicyName: LambdaAuthorizerDynamoDBReadPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt FamiliesTable.Arn
                  - !GetAtt ProfilesTable.Arn

  LambdaAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: dist/src/authorizers/jwtAuthorizer.handler
      Runtime: nodejs20.x
      Timeout: 5
      Role: !GetAtt LambdaAuthorizerFunctionRole.Arn
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref KinableUserPool
          COGNITO_CLIENT_ID: !Ref KinableUserPoolClient
          FAMILIES_TABLE_NAME: !Ref FamiliesTable
          PROFILES_TABLE_NAME: !Ref ProfilesTable
          STAGE: !Ref AWS::StackName
    Metadata:
      BuildMethod: makefile

  FamiliesTable:
    Type: AWS::DynamoDB::GlobalTable
    Properties:
      TableName: !Sub "KinableFamilies-${AWS::StackName}"
      AttributeDefinitions:
        - AttributeName: familyId
          AttributeType: S
      KeySchema:
        - AttributeName: familyId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Replicas:
        - Region: us-east-2
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true
        - Region: us-west-2
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true

  ProfilesTable:
    Type: AWS::DynamoDB::GlobalTable
    Properties:
      TableName: !Sub "KinableProfiles-${AWS::StackName}"
      AttributeDefinitions:
        - AttributeName: profileId
          AttributeType: S
        - AttributeName: familyId
          AttributeType: S
      KeySchema:
        - AttributeName: profileId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: FamilyIdIndex
          KeySchema:
            - AttributeName: familyId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Replicas:
        - Region: us-east-2
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true
        - Region: us-west-2
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true

  # Configuration table for AI provider settings
  ProviderConfigTable:
    Type: AWS::DynamoDB::GlobalTable
    Properties:
      TableName: !Sub "KinableProviderConfig-${AWS::StackName}"
      AttributeDefinitions:
        - AttributeName: configId
          AttributeType: S
      KeySchema:
        - AttributeName: configId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Replicas:
        - Region: us-east-2
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true
        - Region: us-west-2
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true
            
  # Circuit breaker state table for provider health tracking
  ProviderHealthTable:
    Type: AWS::DynamoDB::GlobalTable
    Properties:
      TableName: !Sub "KinableProviderHealth-${AWS::StackName}"
      AttributeDefinitions:
        - AttributeName: providerRegion
          AttributeType: S
      KeySchema:
        - AttributeName: providerRegion
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Replicas:
        - Region: us-east-2
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true
        - Region: us-west-2
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true
            
  # Role for the chat router function
  ChatRouterFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ChatRouterDynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt ProviderConfigTable.Arn
                  - !Sub "${ProviderConfigTable.Arn}/index/*"
                  - !GetAtt ProfilesTable.Arn
                  - !Sub "${ProfilesTable.Arn}/index/*"
                  - !GetAtt ProviderHealthTable.Arn
                  - !Sub "${ProviderHealthTable.Arn}/index/*"
        - PolicyName: ChatRouterSecretsManagerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource:
                  # Secrets Manager always adds a random suffix to the end of secret names in the ARN
                  # Using "*" to match any suffix for reliable matching across environments
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AWS::StackName}-${AWS::Region}-anthropic-api-key-*"
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AWS::StackName}-${AWS::Region}-openai-api-key-*"

  # Chat router Lambda function
  ChatRouterFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Handles chat routing and AI provider selection. Updated: $(date +%s)"
      CodeUri: .
      Handler: dist/src/handlers/chatRouter.handler
      Runtime: nodejs20.x
      Timeout: 30  # LLM calls can take time
      MemorySize: 256  # More memory for handling requests
      Role: !GetAtt ChatRouterFunctionRole.Arn
      Environment:
        Variables:
          PROVIDER_CONFIG_TABLE_NAME: !Ref ProviderConfigTable
          PROVIDER_HEALTH_TABLE: !Ref ProviderHealthTable
          OPENAI_API_KEY_SECRET_ID: !Sub "kinable-dev-${AWS::Region}-openai-api-key"
          ACTIVE_CONFIG_ID: "GLOBAL_AISERVICE_CONFIG_V1"
          STAGE: !Ref AWS::StackName
      Events:
        ChatEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref KinableHttpApi
            Path: /v1/chat
            Method: post
            Auth:
              Authorizer: JwtAuthorizer
    Metadata:
      BuildMethod: makefile

Outputs:
  HttpApiUrl:
    Description: "Base API Gateway endpoint URL"
    Value: !Sub "https://${KinableHttpApi}.execute-api.${AWS::Region}.amazonaws.com"
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${KinableHttpApi}.execute-api.${AWS::Region}.amazonaws.com/hello"
  HelloWorldFunctionArn:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  CognitoUserPoolId:
    Description: "ID of the Kinable Cognito User Pool"
    Value: !Ref KinableUserPool
  CognitoUserPoolClientId:
    Description: "ID of the Kinable Cognito User Pool Client"
    Value: !Ref KinableUserPoolClient
  LambdaAuthorizerFunctionArn:
    Description: "ARN for the Lambda Authorizer Function"
    Value: !GetAtt LambdaAuthorizerFunction.Arn
  FamiliesTableName:
    Description: "Name of the Families DynamoDB table"
    Value: !Ref FamiliesTable
  ProfilesTableName:
    Description: "Name of the Profiles DynamoDB table"
    Value: !Ref ProfilesTable
  ProviderConfigTableName:
    Description: "Name of the Provider Configuration DynamoDB table"
    Value: !Ref ProviderConfigTable
  ChatRouterApi:
    Description: "API Gateway endpoint URL for Chat Router function"
    Value: !Sub "https://${KinableHttpApi}.execute-api.${AWS::Region}.amazonaws.com/v1/chat"
  ChatRouterFunctionArn:
    Description: "Chat Router Lambda Function ARN"
    Value: !GetAtt ChatRouterFunction.Arn 